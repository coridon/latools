import sys
import numpy as np
import pyqtgraph as pg

from PyQt4 import QtGui as qt
from PyQt4 import QtCore as qc

from objects_gui import *


pg.setConfigOption('background', 'w')
version = '0.1a'


# class analyse(object):
#     """
#     Dummy analyse class for gui development
#     """
#     def __init__(self, *args):
#         self.samples = np.array(['Sample A', 'Sample B'])
#         self.analytes = np.array(['a', 'b'])
#         self.data_dict = {'Sample A': D(m=1.),
#                           'Sample B': D(m=2.)}
#         self.cmap = self.data_dict['Sample A'].cmap


# class D(object):
#     """
#     Dummy laser data class for gui development
#     """
#     def __init__(self, m, *args):
#         self.Time = np.linspace(0, 2 * np.pi, 500)
#         self.focus = {'a': np.sin(self.Time / m),
#                       'b': np.cos(self.Time / m)}
#         self.cmap = {'a': 'blue',
#                      'b': 'red'}


# generated by Qt Creator
try:
    _fromUtf8 = qc.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = qt.QApplication.UnicodeUTF8

    def _translate(context, text, disambig):
        return qt.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return qt.QApplication.translate(context, text, disambig)


class latools(qt.QMainWindow):
    def __init__(self):
        super(latools, self).__init__()
        # set up dummy data
        # self.dat = analyse('./test_data/')
        # self.dat.live_sample = self.dat.samples[0]

        # self.makeTraces()

        # self.wdir = ''

        self.setupUi(self)

        self.showMaximized()

    def setupUi(self, latools):
        # main window setup
        self.mainWindow = qt.QWidget(latools)
        self.mainWindow.setMouseTracking(False)
        self.verticalLayout = qt.QVBoxLayout(self.mainWindow)
        self.verticalLayout.setMargin(2)
        self.verticalLayout.setSpacing(2)

        # top panel setup
        self.topPanel = qt.QHBoxLayout()
        self.topPanel.setSizeConstraint(qt.QLayout.SetMaximumSize)
        self.topPanel.setMargin(11)
        self.topPanel.setSpacing(6)

        # processing tabs setup
        self.proc_tabs = qt.QTabWidget(self.mainWindow)
        sizePolicy = qt.QSizePolicy(qt.QSizePolicy.Expanding,
                                    qt.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.proc_tabs.sizePolicy().hasHeightForWidth())
        self.proc_tabs.setSizePolicy(sizePolicy)

        # data load tab
        # widgets
        self.tab_load = qt.QWidget()
        self.btn_import = qt.QPushButton(self.tab_load, text="Import Data")
        self.btn_import.clicked.connect(self.loadData)
        self.lbl_wdir = qt.QLabel(self.tab_load, text='')
        self.btn_dspk = qt.QPushButton(self.tab_load, text="Despike Data")
        self.lbl_dspk = qt.QLabel(self.tab_load)

        # layout
        self.gridLayout_2 = qt.QVBoxLayout(self.tab_load)
        self.gridLayout_2.setMargin(6)
        self.gridLayout_2.setSpacing(6)
        self.load_layout = qt.QGridLayout()
        self.load_layout.setMargin(0)
        self.load_layout.setSpacing(6)
        self.load_layout.addWidget(self.btn_import, 0, 0, 1, 1)
        self.load_layout.addWidget(self.lbl_wdir, 0, 1, 1, 1)
        self.load_layout.addWidget(self.btn_dspk, 1, 0, 1, 1)
        self.load_layout.addWidget(self.lbl_dspk, 1, 1, 1, 1)
        self.load_layout.setColumnStretch(0, 1)
        self.load_layout.setColumnStretch(1, 4)
        self.gridLayout_2.addLayout(self.load_layout)
        self.proc_tabs.addTab(self.tab_load, _fromUtf8("Import Data"))

        # background correction tab
        # widgets
        self.tab_bkg = qt.QWidget()
        self.chk_refine = qt.QCheckBox(self.tab_bkg, text="Refine Selections")
        self.drp_idanalyte = qt.QComboBox(self.tab_bkg)
        self.drp_idanalyte.activated[str].connect(self.idTraceSelect)
        self.idanalyte = 'test'
        self.lbl_ided = qt.QLabel(self.tab_bkg, text=self.idanalyte)
        self.btn_bkgid = qt.QPushButton(self.tab_bkg, text="Identify Background")

        # layout
        self.gridLayout_4 = qt.QVBoxLayout(self.tab_bkg)
        self.gridLayout_4.setMargin(6)
        self.gridLayout_4.setSpacing(6)
        self.bkg_layout = qt.QGridLayout()
        self.bkg_layout.setMargin(0)
        self.bkg_layout.setSpacing(6)
        self.bkg_layout.addWidget(self.chk_refine, 1, 0, 1, 1)
        self.bkg_layout.addWidget(self.drp_idanalyte, 0, 1, 1, 1)
        self.bkg_layout.addWidget(self.btn_bkgid, 0, 0, 1, 1)
        self.bkg_layout.addWidget(self.lbl_ided, 0, 2, 1, 1)
        self.bkg_layout.setColumnStretch(0, 1)
        self.bkg_layout.setColumnStretch(1, 1)
        self.bkg_layout.setColumnStretch(2, 3)

        self.gridLayout_4.addLayout(self.bkg_layout)
        self.proc_tabs.addTab(self.tab_bkg, _fromUtf8("Background Correction"))

        # calibration tab
        # widgets
        self.tab_srm = qt.QWidget()
        self.btn_srmdat = qt.QPushButton(self.tab_srm, text="SRM Data")
        self.btn_srmdat.clicked.connect(self.chooseSRMData)
        self.lbl_srmdat = qt.QLabel(self.tab_srm,
                                    text='Please Choose SRM Data')
        self.btn_srmid = qt.QPushButton(self.tab_srm, text="Identify SRMs")
        self.lbl_srmid = qt.QLabel(self.tab_srm)
        self.btn_srmid.clicked.connect(self.idSRMs)

        self.gridLayout_6 = qt.QGridLayout(self.tab_srm)
        self.gridLayout_6.setMargin(11)
        self.gridLayout_6.setSpacing(6)
        self.srm_layout = qt.QGridLayout()
        self.srm_layout.setMargin(11)
        self.srm_layout.setSpacing(6)
        self.srm_layout.addWidget(self.btn_srmdat, 1, 0, 1, 1)
        self.srm_layout.addWidget(self.btn_srmid, 0, 0, 1, 1)
        self.srm_layout.addWidget(self.lbl_srmid, 0, 1, 1, 1)
        self.srm_layout.addWidget(self.lbl_srmdat, 1, 1, 1, 1)
        self.srm_layout.setColumnStretch(0, 1)
        self.srm_layout.setColumnStretch(1, 4)
        self.gridLayout_6.addLayout(self.srm_layout, 0, 0, 1, 1)
        self.proc_tabs.addTab(self.tab_srm, _fromUtf8("Calibration"))

        # self.chk_std.setText(_translate("latools", "", None))
        # self.chk_med.setText(_translate("latools", , None))
        # self.chk_mean.setText(_translate("latools", "Mean", None))
        # self.chk_percent.setText(_translate("latools", "Percentile", None))
        # self.chk_se.setText(_translate("latools", "Standard Error", None))
        # self.lbl_statout.setText(_translate("latools", "TextLabel", None))

        # sample statistics tab
        # widgets
        self.tab_stat = qt.QWidget()
        self.chk_minmax = qt.QCheckBox(self.tab_stat, text='Min & Max')
        self.chk_std = qt.QCheckBox(self.tab_stat, text="Standard Deviation")
        self.chk_med = qt.QCheckBox(self.tab_stat, text="Median")
        self.chk_mean = qt.QCheckBox(self.tab_stat, text="Mean")
        self.chk_percent = qt.QCheckBox(self.tab_stat, text="Percentile")
        self.drp_percent = qt.QComboBox(self.tab_stat)
        for n in [50, 66, 75, 90, 95, 99]:
            self.drp_percent.addItem(str(n))
        self.drp_percent.activated[str].connect(self.onChoosePercentile)
        self.drp_percent.setIconSize(qc.QSize(12, 12))
        self.chk_se = qt.QCheckBox(self.tab_stat, text="Standard Error")
        self.btn_statout = qt.QPushButton(self.tab_stat,
                                          text="Output Location")
        self.lbl_statout = qt.QLabel(self.tab_stat)
        self.btn_statcalc = qt.QPushButton(self.tab_stat,
                                           text="Calculate Statistics")

        self.gridLayout_8 = qt.QGridLayout(self.tab_stat)
        self.gridLayout_8.setMargin(11)
        self.gridLayout_8.setSpacing(6)
        self.stat_layout = qt.QGridLayout()
        self.stat_layout.setContentsMargins(0, 11, 11, 11)
        self.stat_layout.setSpacing(6)
        self.stat_layout.addWidget(self.chk_minmax, 1, 1, 1, 1)
        self.stat_layout.addWidget(self.chk_std, 1, 0, 1, 1)
        self.stat_layout.addWidget(self.chk_med, 0, 1, 1, 1)
        self.stat_layout.addWidget(self.chk_mean, 0, 0, 1, 1)
        self.percent_layout = qt.QHBoxLayout()
        self.percent_layout.setMargin(11)
        self.percent_layout.setSpacing(6)
        self.percent_layout.addWidget(self.chk_percent)
        self.percent_layout.addWidget(self.drp_percent)
        self.stat_layout.addLayout(self.percent_layout, 2, 1, 1, 1)
        self.stat_layout.addWidget(self.chk_se, 2, 0, 1, 1)
        self.stat_layout.addWidget(self.btn_statcalc, 2, 2, 1, 1)
        self.stat_layout.addWidget(self.btn_statout, 0, 2, 1, 1)
        self.stat_layout.addWidget(self.lbl_statout, 1, 2, 1, 1)
        self.gridLayout_8.addLayout(self.stat_layout, 3, 0, 1, 1)
        self.proc_tabs.addTab(self.tab_stat, _fromUtf8("Sample Statistics"))

        self.topPanel.addWidget(self.proc_tabs)

        self.proc_tabs.setCurrentIndex(0)

        # display log pane
        self.log = qt.QWidget(self.mainWindow)
        self.topPanel.addWidget(self.log)
        self.topPanel.setStretch(0, 3)
        self.topPanel.setStretch(1, 2)
        self.verticalLayout.addLayout(self.topPanel)

        # plot pane layout
        self.plotLayout = qt.QHBoxLayout()
        self.plotLayout.setMargin(11)
        self.plotLayout.setSpacing(6)

        # self.plotLayout.setStretch(0, 1)
        # self.plotLayout.setStretch(1, 6)
        self.verticalLayout.addLayout(self.plotLayout)
        self.verticalLayout.setStretch(0, 1)
        self.verticalLayout.setStretch(1, 5)

        self.setCentralWidget(self.mainWindow)

    def setupPlot(self):
        # plot setup
        self.plt = pg.PlotWidget(self.mainWindow)

        # options setup
        self.optionsPane = qt.QVBoxLayout()
        self.optionsPane.setMargin(11)
        self.optionsPane.setSpacing(6)

        # analyte selection
        self.lbl_analytes = qt.QLabel(self.mainWindow, text='Analytes')
        self.optionsPane.addWidget(self.lbl_analytes)

        # populate analyte checkboxes
        self.analyte_switches = {}
        for a in self.dat.analytes:
            self.analyte_switches[a] = qt.QCheckBox(checked=False,
                                                    text=a)
            self.analyte_switches[a].stateChanged.connect(self.updatePlot)
            self.optionsPane.addWidget(self.analyte_switches[a])

        self.line = qt.QFrame(self.mainWindow)
        self.line.setFrameShape(qt.QFrame.HLine)
        self.line.setFrameShadow(qt.QFrame.Sunken)
        self.optionsPane.addWidget(self.line)

        self.lbl_samples = qt.QLabel(self.mainWindow, text='Samples')
        self.optionsPane.addWidget(self.lbl_samples)

        # populate sample list
        self.listWidget = qt.QListWidget(self.mainWindow)
        self.listWidget.itemClicked.connect(self.onSampleActivated)
        self.sample_select = {}
        for s in self.dat.samples:
            self.sample_select[s] = qt.QListWidgetItem(s)
            self.listWidget.addItem(self.sample_select[s])
        self.optionsPane.addWidget(self.listWidget)

        self.line_2 = qt.QFrame(self.mainWindow)
        self.line_2.setFrameShape(qt.QFrame.HLine)
        self.line_2.setFrameShadow(qt.QFrame.Sunken)
        self.optionsPane.addWidget(self.line_2)

        spacerItem = qt.QSpacerItem(20, 40,
                                    qt.QSizePolicy.Minimum,
                                    qt.QSizePolicy.Expanding)
        self.optionsPane.addItem(spacerItem)
        self.plotLayout.insertLayout(0, self.optionsPane)

        # populate plot pane
        self.plotLayout.addLayout(self.optionsPane)
        self.plotLayout.addWidget(self.plt)

        self.plotLayout.setStretch(0, 1)
        self.plotLayout.setStretch(1, 6)

        # populate analyte selection dropdown for background ID
        for a in self.dat.analytes:
            self.drp_idanalyte.addItem(a)

    # helper functions: data processing
    def loadData(self):
        dialog = qt.QFileDialog(self)
        dialog.setFileMode(qt.QFileDialog.Directory)
        dialog.setOption(qt.QFileDialog.ShowDirsOnly)
        dialog.exec_()

        self.wdir = dialog.selectedFiles()[0] + '/'
        self.lbl_wdir.setText(self.wdir)

        self.dat = analyse(self.wdir)
        self.dat.live_sample = self.dat.samples[0]
        self.makeTraces()

        self.setupPlot()
        return

    # helper functions: plotting & data selection
    def makeTraces(self):
        self.traces = {}
        for s in self.dat.samples:
            self.traces[s] = {}
            for a in self.dat.analytes:
                d = self.dat.data_dict[s]
                self.traces[s][a] = pg.PlotDataItem(x=d.Time,
                                                    y=d.focus[a],
                                                    pen=qt.QColor(d.cmap[a]),
                                                    antialias=True)
        return

    def updatePlot(self):
        self.plt.clear()
        self.plt.setLabels(title=self.dat.live_sample)
        for k, v in self.analyte_switches.items():
            if v.isChecked():
                self.plt.addItem(self.traces[self.dat.live_sample][k])
        return

    def onSampleActivated(self):
        self.dat.live_sample = self.listWidget.currentItem().text()
        self.updatePlot()
        return

    def idTraceSelect(self, sample):
        self.idanalyte = sample
        self.lbl_ided.setText(self.idanalyte)
        return

    def onChoosePercentile(self, pc):
        self.stat_quantiles = [0 + float(pc) / 2, 100 - float(pc) / 2]

    def chooseSRMData(self):
        dialog = qt.QFileDialog(self)
        # dialog.setFileMode(qt.QFileDialog.Directory)
        # dialog.setOption(qt.QFileDialog.ShowDirsOnly)
        dialog.exec_()

        self.SRMdat = dialog.selectedFiles()[0]
        self.lbl_srmdat.setText(self.SRMdat)
        pass

    def idSRMs(self):
        # identify SRM data
        pass

    def retranslateUi(self, latools):
        latools.setWindowTitle(_translate("latools",
                                          "LATools Version" + version, None))
        self.lbl_dspk.setText(_translate("latools",
                                         "TextLabel", None))
        # self.proc_tabs.setTabText(self.proc_tabs.indexOf(self.tab_load),
                                  # _translate("latools", "Data Import", None))
        # self.chk_refine.setText(_translate("latools", "Refine ID Mode", None))
        # self.lbl_ided.setText(_translate("latools", "TextLabel", None))
        # self.proc_tabs.setTabText(self.proc_tabs.indexOf(self.tab_bkg), _translate("latools", "Background Correction", None))
        # self.lbl_srmid.setText(_translate("latools", "TextLabel", None))
        # self.lbl_srmdat.setText(_translate("latools", "TextLabel", None))
        # self.proc_tabs.setTabText(self.proc_tabs.indexOf(self.tab_srm), _translate("latools", "Calibration", None))


        self.menuFile.setTitle(_translate("latools", "File", None))
        self.menuEdit.setTitle(_translate("latools", "Edit", None))
        self.menuProcess.setTitle(_translate("latools", "Process", None))
        self.menuHelp.setTitle(_translate("latools", "Help", None))
        self.actionLoad_Data_2.setText(_translate("latools", "Load Data", None))
        self.actionDespike.setText(_translate("latools", "Despike", None))
        self.actionIdentify_Background.setText(_translate("latools", "Identify Background", None))
        self.actionBackground_Correct.setText(_translate("latools", "Background Correct", None))
        self.actionRatio.setText(_translate("latools", "Calculate Ratios", None))
        self.actionIdentify_Standards.setText(_translate("latools", "Identify Standards", None))
        self.actionApply_SRMs.setText(_translate("latools", "Apply SRMs", None))

# class lagui(qt.QMainWindow):
#     def __init__(self):
#         super(lagui, self).__init__()
#         self.initUI()

#     def initUI(self):
#         # set window title
#         self.setWindowTitle('Laser Ablation TOOLS (LATOOLS) -- Version ' + version)
#         self.initMenuBar()  # initialise menu bars

#         # set layout
#         self.mainPanel = qt.QWidget()
#         self.grid = qt.QGridLayout()
#         self.mainPanel.setLayout(self.grid)
#         self.setCentralWidget(self.mainPanel)

#         # dummy data
#         self.dat = analyse()
#         self.dat.live_sample = 'Sample A'

#         # checkboxes
#         self.analyte_switches = {}
#         for a in self.dat.analytes:
#             self.analyte_switches[a] = qt.QCheckBox(checked=False,
#                                                     text=a)
#             self.analyte_switches[a].stateChanged.connect(self.updatePlot)

#         # initialise panes
#         self.p_opt = OptionsPane(self)
#         self.p_plot = PlotPane(self)
#         self.p_proc = ProcessingPane(self)

#         self.showMaximized()

#         self.makeTraces()
#         # self.updatePlot()

#     def initMenuBar(self):
#         # make menu bar
#         self.menubar = self.menuBar()

#         # file menu
#         self.fileMenu = self.menubar.addMenu('&File')
#         # close window
#         closeAction = qt.QAction('Close', self)
#         closeAction.setShortcut('Ctrl+Q')
#         closeAction.setShortcut('Ctrl+W')
#         closeAction.setStatusTip('Close')
#         closeAction.triggered.connect(self.close)

#         # load data
#         loadAction = qt.QAction('Load Data', self)
#         loadAction.setShortcut('Ctrl+L')
#         loadAction.setStatusTip('Load Dataset')
#         # loadAction.triggered.connect(self.loadData)

#         # populate
#         self.fileMenu.addAction(loadAction)
#         self.fileMenu.addSeparator()
#         self.fileMenu.addAction(closeAction)

#         # edit menu
#         # self.editMenu = self.menubar.addMenu('&Edit')

#         # processing menu
#         self.editMenu = self.menubar.addMenu('&Processing')

#         # help menu
#         self.helpMenu = self.menubar.addMenu('&Help')

#     def makeTraces(self):
#         self.traces = {}
#         for s in self.dat.samples:
#             self.traces[s] = {}
#             for a, v in self.analyte_switches.items():
#                 d = self.dat.data_dict[s]
#                 self.traces[s][a] = pg.PlotDataItem(x=d.Time,
#                                                     y=d.focus[a],
#                                                     pen=qt.QColor(d.cmap[a]))

#     def updatePlot(self):
#         self.plt.clear()
#         self.plt.setLabels(title=self.dat.live_sample)
#         for k, v in self.analyte_switches.items():
#             if v.isChecked():
#                 self.plt.addItem(self.traces[self.dat.live_sample][k])


# class ProcessingPane(qt.QFrame):
#     def __init__(self, parent):
#         super(ProcessingPane, self).__init__(parent)
#         self.parent = parent
#         self.initPane()
#         self.addPane()

#     def initPane(self):
#         # overall pane layout
#         layout = qt.QVBoxLayout()

#         # first row buttons
#         cdirButton = qt.QPushButton("Choose Directory")
#         cdirButton.clicked.connect(self.chooseDir)

#         # first row
#         self.row1 = qt.QHBoxLayout()
#         self.row1.addWidget(cdirButton)
#         self.row1.addStretch(1)

#         layout.addLayout(self.row1)

#         # second row buttons
#         loadButton = qt.QPushButton("Load Data")
#         loadButton.clicked.connect(self.loadData)

#         # second row
#         self.row2 = qt.QHBoxLayout()
#         self.row2.addWidget(loadButton)
#         self.row2.addStretch(1)

#         layout.addLayout(self.row2)

#         self.setLayout(layout)

#     # button functions
#     def chooseDir(self):
#         dialog = qt.QFileDialog(self)
#         dialog.setFileMode(qt.QFileDialog.Directory)
#         dialog.setOption(qt.QFileDialog.ShowDirsOnly)
#         dialog.exec_()

#         self.parent.wdir = dialog.selectedFiles()[0]
#         self.row1.insertWidget(1, qt.QLabel(text=self.parent.wdir))

#     def loadData(self):
#         pass

#     def addPane(self):
#         # self.setStyleSheet("border: 1px solid green")
#         self.parent.grid.addWidget(self, 0, 0, 1, 8)


# class OptionsPane(qt.QFrame):
#     def __init__(self, parent):
#         super(OptionsPane, self).__init__(parent)
#         self.parent = parent
#         self.initPane()
#         self.addPane()

#     def initPane(self):

#         checkboxes = qt.QVBoxLayout()
#         checkboxes.addWidget(qt.QLabel(text='Analytes'))
#         for v in self.parent.analyte_switches.values():
#             checkboxes.addWidget(v)
#         checkboxes.addStretch(1)

#         samlist = qt.QComboBox()
#         for s in self.parent.dat.samples:
#             samlist.addItem(s)
#         samlist.activated[str].connect(self.onSampleActivated)

#         layout = qt.QVBoxLayout()
#         layout.addLayout(checkboxes)
#         layout.addWidget(qt.QLabel(text='Samples'))
#         layout.addWidget(samlist)
#         layout.addStretch(1)

#         self.setLayout(layout)

#     def onSampleActivated(self, sample):
#         self.parent.live_sample = sample
#         self.parent.updatePlot()
#         return

#     def addPane(self):
#         # self.setStyleSheet("border: 1px solid blue")
#         self.parent.grid.addWidget(self, 1, 0, 5, 2)
#         return


# class PlotPane(pg.PlotWidget):
#     def __init__(self, parent):
#         super(PlotPane, self).__init__(parent)

#         # self.makePlot(parent)
#         self.addPane(parent)
#         self.plot()
#         self.enableAutoRange(False)

#         parent.plt = self

#     # def makePlot(self, parent):
#     #     parent.plt = self.plot()

#         # d = parent.dat.data_dict[parent.live_sample]

#         # for a in parent.dat.analytes:
#         #     if parent.analyte_switches[a].isChecked():
#         #         self.plot(d.Time, d.focus[a],
#         #                   pen=d.cmap[a],
#         #                   antialias=True)

#     def addPane(self, parent):
#         parent.grid.addWidget(self, 1, 2, 5, 6)

# # class PlotPane(qt.QWidget):
# #     def __init__(self, parent):
# #         super(PlotPane, self).__init__(parent)

# # def main


if __name__ == '__main__':
    app = qt.QApplication(sys.argv)
    latools = latools()
    sys.exit(app.exec())


# Useful Stuff Dump

# self.showFullScreen()  # makes the widget full screen
